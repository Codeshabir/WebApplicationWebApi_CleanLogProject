@model Client.Models.CleaningLogsDTO
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Main content -->
<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card card-primary">
                    <div class="card-header">
                        <h3 class="card-title">Edit Cleaning Logs</h3>
                    </div>
                    <form id="cleaningLogForm" asp-action="Edit" asp-controller="CleaningLogs" enctype="multipart/form-data">
                        <div class="card-body">
                            <div class="form-group">
                                <label asp-for="contractorsName">Contractor's Name</label>
                                <input asp-for="contractorsName" type="text" class="form-control" placeholder="Enter Contractor's Name" value="@Model.contractorsName">
                                <span asp-validation-for="contractorsName" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="employeeName">Employee Name</label>
                                <input asp-for="employeeName" type="text" class="form-control" placeholder="Enter Employee Name" value="@Model.employeeName">
                                <span asp-validation-for="employeeName" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="workDate">Work Date</label>
                                <input asp-for="workDate" type="date" class="form-control" value="@Model.workDate.ToString("yyyy-MM-dd")">
                                <span asp-validation-for="workDate" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="propertyAddress">Property Address</label>
                                <input asp-for="propertyAddress" type="text" class="form-control" placeholder="Enter Property Address" value="@Model.propertyAddress">
                                <span asp-validation-for="propertyAddress" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="locationCoordinates">Location Coordinates</label>
                                <input asp-for="locationCoordinates" id="locationCoordinates" type="text" class="form-control" placeholder="Fetching Location..." value="@Model.locationCoordinates">
                                <span asp-validation-for="locationCoordinates" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="workStartTime">Work Start Time</label>
                                <input asp-for="workStartTime" type="time" class="form-control" value="@Model.workStartTime.ToString(@"hh\:mm")">
                                <span asp-validation-for="workStartTime" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="weatherCondition">Weather Condition</label>
                                <input asp-for="weatherCondition" id="weatherCondition" type="text" class="form-control" placeholder="Fetching Weather..." value="@Model.weatherCondition">
                                <span asp-validation-for="weatherCondition" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="workCompletionTime">Work Completion Time</label>
                                <input asp-for="workCompletionTime" type="time" class="form-control" value="@Model.workCompletionTime.ToString(@"hh\:mm")">
                                <span asp-validation-for="workCompletionTime" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="descriptionOfWorkPerformed">Description of work performed</label>
                                <textarea asp-for="descriptionOfWorkPerformed" class="form-control" placeholder="Enter Description of Work Performed">@Model.descriptionOfWorkPerformed</textarea>
                                <span asp-validation-for="descriptionOfWorkPerformed" class="text-danger"></span>
                                <button class="btn btn-primary mt-2 voiceInputBtn">Voice Input</button>
                            </div>
                            <div class="form-group">
                                <label asp-for="difficultiesOrObstaclesEncountered">Difficulties or obstacles encountered</label>
                                <textarea asp-for="difficultiesOrObstaclesEncountered" class="form-control" placeholder="Enter Difficulties or Obstacles Encountered">@Model.difficultiesOrObstaclesEncountered</textarea>
                                <span asp-validation-for="difficultiesOrObstaclesEncountered" class="text-danger"></span>
                                <button class="btn btn-primary mt-2 voiceInputBtn">Voice Input</button>
                            </div>
                            <div class="form-group">
                                <label asp-for="generalCommentsOrObservations">General comments or observations (if any)</label>
                                <textarea asp-for="generalCommentsOrObservations" class="form-control" placeholder="Enter General Comments or Observations">@Model.generalCommentsOrObservations</textarea>
                                <span asp-validation-for="generalCommentsOrObservations" class="text-danger"></span>
                                <button class="btn btn-primary mt-2 voiceInputBtn">Voice Input</button>
                            </div>
                            <div class="form-group">
                                <label asp-for="photoFiles">Photos</label>
                                <input asp-for="photoFiles" type="file" class="form-control" placeholder="Add Photos" multiple>
                                <span asp-validation-for="photoFiles" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="comments">Comments</label>
                                <textarea asp-for="comments" id="comments" class="form-control" placeholder="Speak your comments">@Model.comments</textarea>
                                <span asp-validation-for="comments" class="text-danger"></span>
                                <button id="voiceInputBtnComments" class="btn btn-primary mt-2">Voice Input</button>
                            </div>

                            <!-- Display existing photos -->
                            <div class="form-group">
                                <label>Existing Photos</label>
                                <div>
                                    @foreach (var photo in Model.photos.Split(','))
                                    {
                                        <img src="@Url.Content("~/images/" + photo.Trim())" alt="abc" class="img-thumbnail" style="max-width: 200px; max-height: 200px; margin: 5px;" />
                                    }
                                </div>

                            </div>
                        </div>
                        <!-- /.card-body -->
                        <div class="card-footer">
                            <button type="submit" class="btn btn-success">Update</button>
                            <button asp-action="Index" asp-controller="CleaningLogs" type="submit" class="btn btn-primary">Back to List</button>

                        </div>
                    </form>
                </div>
                <!-- /.card -->
            </div>
            <!--/.col (left) -->
            <!-- right column -->
            <div class="col-md-6">
            </div>
            <!--/.col (right) -->
        </div>
        <!-- /.row -->
    </div>
    <!-- /.container-fluid -->
</section>
<!-- /.content -->

<script>
    document.addEventListener("DOMContentLoaded", function () {
        let isVoiceInputInProgress = false; // Flag to track if voice input is ongoing
        let recognition; // Variable to hold the SpeechRecognition object
        let timer; // Variable to hold the timer

        // Function to fetch current location
        function fetchLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(async function (position) {
                    const lat = position.coords.latitude;
                    const lon = position.coords.longitude;
                    document.getElementById('locationCoordinates').value = `${lat}, ${lon}`;

                    // Fetch weather information
                    await fetchWeather(lat, lon);
                }, function (error) {
                    console.error("Error fetching location: ", error);
                });
            } else {
                console.error("Geolocation is not supported by this browser.");
            }
        }

        // Function to fetch weather using OpenWeatherMap API
        async function fetchWeather(lat, lon) {
            const apiKey = '2449d374beb7f6d424246ec0447b2adb';
            const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}`;

            try {
                const response = await fetch(weatherUrl);
                const data = await response.json();
                const weatherDescription = data.weather[0].description;
                document.getElementById('weatherCondition').value = weatherDescription;
            } catch (error) {
                console.error("Error fetching weather: ", error);
            }
        }

        // Function to handle voice input
        function startVoiceInput(button, targetFieldId) {
            const targetField = document.getElementById(targetFieldId);
            recognition = new webkitSpeechRecognition(); // Create a SpeechRecognition object
            recognition.lang = 'en-US'; // Set language to English (change as needed)
            recognition.interimResults = false; // Disable interim results
            recognition.maxAlternatives = 1; // Limit to one alternative result

            // Event handler for when speech recognition results are available
            recognition.onresult = function (event) {
                const result = event.results[0][0].transcript; // Get the transcribed text
                targetField.value = result; // Populate the target field with transcribed text
            };

            // Event handler for speech recognition errors
            recognition.onerror = function (event) {
                console.error('Speech recognition error:', event.error);
            };

            // Event handler for when speech recognition is ended
            recognition.onend = function () {
                console.log('Speech recognition ended.');
                if (isVoiceInputInProgress) {
                    // If voice input is still in progress, restart recognition
                    startVoiceInput(button, targetFieldId);
                } else {
                    // Clear recognition object when not in progress
                    recognition = null;
                    // Enable voice input button
                    button.disabled = false;
                }
            };

            // Start speech recognition
            recognition.start();

            // Set flag indicating voice input is in progress
            isVoiceInputInProgress = true;

            // Disable voice input button until voice input is completed
            button.disabled = true;

            // Change button text to "Stop" while voice input is in progress
            button.textContent = "Stop";

            // Start timer to stop voice input after 30 seconds
            timer = setTimeout(function () {
                stopVoiceInput(button);
            }, 30000); // 30 seconds
        }

        // Function to stop voice input
        function stopVoiceInput(button) {
            if (recognition) {
                // Stop speech recognition if it's in progress
                recognition.stop();
            }
            // Set flag indicating voice input is not in progress
            isVoiceInputInProgress = false;

            // Clear the timer
            clearTimeout(timer);

            // Change button text back to "Voice Input" after stopping voice input
            button.textContent = "Voice Input";

            // Enable voice input button
            button.disabled = false;
        }

        // Event listener for voice input buttons click
        document.querySelectorAll('.voiceInputBtn').forEach(button => {
            button.addEventListener('click', function () {
                // Toggle voice input on and off based on current state
                const targetFieldId = button.previousElementSibling.id;
                if (!isVoiceInputInProgress) {
                    startVoiceInput(button, targetFieldId);
                } else {
                    stopVoiceInput(button);
                }
            });
        });

        // Initial fetch location
        fetchLocation();
    });
</script>
